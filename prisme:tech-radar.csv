name,ring,quadrant,isNew,description
"C#",adopt,"Languages and Frameworks",true,"<a href='https://docs.microsoft.com/en-us/dotnet/csharp/'>C#</a> is our language of choice. It's strongly-typed, blends functional and object-oriented programming and works on all the OS we need to support."
"TypeScript",adopt,"Languages and Frameworks",true,"<a href='https://www.typescriptlang.org/'>TypeScript</a> is our default choice for running code in the browser. It's strongly-typed and smoothes out the rough bits of JavaScript."
".NET 6",adopt,"Languages and Frameworks",true,"<a href='https://dotnet.microsoft.com/'>.NET 6 (Microsoft renamed .NET Core to .NET)</a> is in Long Term Support (LTS). It is cross-platform and a great choice for desktop, web and cloud-based applications."
"React",adopt,"Languages and Frameworks",true,"<a href='https://reactjs.org/'>React</a> makes it painless to create interactive UIs. It is also preferred as it also used by our sister company Aidn"
"Object–relational mappers (ORMs)",hold,"Languages and Frameworks",true,"Unless working with a large number of simple entities, prefer writing SQL directly or using a lightweight object mapper such as <a href='https://github.com/DapperLib/Dapper'>Dapper</a>."
"Blazor",trial,"Languages and Frameworks",true,"<a href='https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor'>Blazor</a> is super exciting. It means we might get to leverage our existing C# skills in the browser."
"GraphQL",trial,"Languages and Frameworks",true,"<a href='https://graphql.org/'>GraphQL</a> is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools. In trial until we know how to handle the security aspect of this"
"Terraform",adopt,"Tools",true,"Used for automating infrastructure provisioning. Also consider tfsec for applying policies across the organization"
"Application Insights",trial,"Tools",true,"We should avoid vendor lock-in, but we need a telemetry platform (incl. feature usage and error reporting), and this is highly valid choice"
"Feature Flagging vendors (Launch Darkly?)",assess,"Tools",true,"The complexity around feature flags can become high and we should consider a third party vendor"
"Microsoft Azure",adopt,"Platforms",true,"Considering the biggest cloud providers out there Microsoft seem to be the platform that is best suited to run an e-health solution when it comes to datacenter location, GDPR and willingness to change. Certain customers might have objections in the future, so all Azure native services should be used with extra caution as we one day might have to switch vendors"
"Azure Service Bus",trial,"Platforms",true,"Considering network latency it makes sense to use a messaging system that is hosted in close proximity to the services themselves. The integration itself should be abstracted away, so that it can be replaced if needed"
"PostgreSQL as backing store",trial,"Platforms",true,"PostgreSQL is a lightweight/free database engine and as such fairly easily run on other platforms then Azure. But does it support everything we need and does it scale well enough?"
"GitHub",adopt,"Platforms",true,"All development should use GitHub."
"Azure DevOps",hold,"Platforms",true,"We are unsure if Microsoft will prioritize GitHub Actions over Azure DevOps for future development, so be cautious if deciding to use Azure DevOps"
"GitHub Actions",assess,"Platforms",true,"GitHub Actions has a growing set of capabilites (like reusable workflows) and it makes sense to keep everything in one place."
"RESTful APIs",adopt,"Techniques",true,"A REST architectural style is our default choice for building web APIs. Deviations can be made when it makes sense to do so."
"Infrastructure as code",adopt,"Techniques",true,"Infrastructure should be provisioned through code rather than manually (except for ad-hoc testing)"
"Automated code style settings",adopt,"Techniques",true,"Codebases should be formatted consistently. Automated code-style settings achieve this without fuss."
"Static code analysis (linters)",adopt,"Techniques",true,"Static code analysis is invaluable for automatically checking for problems in code. We use ESLint for JS and Roslyn-based analyzers for .NET. We also experimented with SonarQube but our implementation wasn't giving us confidence."
"Semantic Versioning",adopt,"Techniques",true,"We should use semver for all our versioning needs unless there's a compelling reason not to."
"Feature Flags",adopt,"Techniques",true,"Once we reach production it will be critical that we can keep deployment to production and release as two seperate events to enable us to ship software multiple times a day. Feature Flags are also a great technique for minimizing long-lived feature branches"
"Continuous delivery",adopt,"Techniques",true,"Products should be ready for release at any time."
"Continuous Deployment",assess,"Techniques",true,"We'd like to evaluate technology that increases our deployment frequency, with a view to getting value into the hands of our users as quickly as possible."
"AI/ML",assess,"Techniques",true,"AI/ML are becoming commoditized. Off-the-shelf software is available for predictive modelling, text analysis, anomaly detection and much more."
"Automation/Low-code solutions",assess,"Techniques",true,"Low-code/no-code solutions, such as Power Apps, allow users to build business logic and solve problems without involving us, resulting in faster innovation and more engaged users."
"Git Ops",trial,"Techniques",true,"The core idea of GitOps is having a Git repository that always contains declarative descriptions of the infrastructure currently desired in the production environment and an automated process to make the production environment match the described state in the repository. If you want to deploy a new application or update an existing one, you only need to update the repository - the automated process handles everything else. It’s like having cruise control for managing your applications in production. <a href='https://www.gitops.tech/'>Read more</a>"
